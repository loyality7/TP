{
    "title": "Hysteresis Qualifier Test - DSA & Programming Fundamentals",
    "description": "A comprehensive test covering Data Structures, Algorithms, and basic programming concepts. This test includes both multiple choice questions and hands-on coding challenges.",
    "duration": 180,
    "proctoring": true,
    "type": "coding_challenge",
    "category": "Computer Science",
    "difficulty": "intermediate",
    "instructions": "1. Complete all MCQs and coding challenges within the time limit\n2. Each coding solution must pass all test cases\n3. You can attempt questions in any order\n4. Ensure your code handles all edge cases",
    "mcqs": [
      {
        "question": "What is the time complexity of the quicksort algorithm in its worst case?",
        "options": [
          "O(n log n)",
          "O(n²)",
          "O(n)",
          "O(log n)"
        ],
        "correctOptions": [1],
        "answerType": "single",
        "marks": 5,
        "difficulty": "medium",
        "explanation": "Quicksort's worst case occurs when the pivot is always the smallest or largest element, leading to O(n²) complexity."
      },
      {
        "question": "Which of the following operations are valid for a Stack data structure?",
        "options": [
          "Push",
          "Pop",
          "Peek",
          "Insert at middle"
        ],
        "correctOptions": [0, 1, 2],
        "answerType": "multiple",
        "marks": 5,
        "difficulty": "easy",
        "explanation": "Stack follows LIFO principle and supports push (add), pop (remove), and peek (view top) operations."
      }
    ],
    "codingChallenges": [
      {
        "title": "Sum of N Natural Numbers",
        "description": "Calculate the sum of first n natural numbers efficiently",
        "problemStatement": "Given an integer n, return the sum of numbers from 1 to n.",
        "constraints": "1. 1 <= n <= 10^9\n2. Time Complexity should be O(1)\n3. Space Complexity should be O(1)",
        "allowedLanguages": ["javascript", "python", "java","c","cpp"],
        "languageImplementations": {
          "javascript": {
            "visibleCode": "function sumNaturalNumbers(n) {\n    // Write your code here\n    // Try to submit your code in O(1) complexity\n    \n}",
            "invisibleCode": "module.exports = sumNaturalNumbers;"
          },
          "python": {
            "visibleCode": "def sum_n_natural_numbers_optimised(n):\n    # Write your code here\n    # Try to submit your code in O(1) complexity\n    pass",
            "invisibleCode": "# Test helper code here"
          },
          "java": {
            "visibleCode": "public class Solution {\n    public long sumNaturalNumbers(int n) {\n        // Write your code here\n        // Try to submit your code in O(1) complexity\n        \n    }\n}",
            "invisibleCode": "// Test helper code here"
          },
          "c": {
            "visibleCode": "long sumNaturalNumbers(int n) {\n    // Write your code here\n    // Try to submit your code in O(1) complexity\n    \n}",
            "invisibleCode": "// Test helper code here"
          },
          "cpp": {
            "visibleCode": "long sumNaturalNumbers(int n) {\n    // Write your code here\n    // Try to submit your code in O(1) complexity\n    \n}",
            "invisibleCode": "// Test helper code here"
          } 
        },
        "testCases": [
          {
            "input": "10",
            "output": "55",
            "isVisible": true,
            "explanation": "Sum of numbers from 1 to 10 = 1 + 2 + 3 + ... + 10 = 55"
          },
          {
            "input": "5",
            "output": "15",
            "isVisible": true,
            "explanation": "Sum of numbers from 1 to 5 = 1 + 2 + 3 + 4 + 5 = 15"
          },
          {
            "input": "100",
            "output": "5050",
            "isVisible": false,
            "explanation": "Hidden test case for larger numbers"
          },
          {
            "input": "1000",
            "output": "500500",
            "isVisible": false,
            "explanation": "Hidden test case to test performance"
          },
          {
            "input": "1",
            "output": "1",
            "isVisible": true,
            "explanation": "Edge case with single number"
          }
        ],
        "marks": 15,
        "timeLimit": 1000,
        "memoryLimit": 128,
        "difficulty": "easy",
        "tags": ["math", "algorithms"]
      },
      {
        "title": "Find Unique Element",
        "description": "Find the unique element in an array where all other elements appear exactly twice",
        "problemStatement": "You have been given an integer array/list(ARR) of size N, where N is equal to [2M + 1]. In the given array/list, 'M' numbers are present twice and one number is present only once. You need to find and return that number which is unique in the array/list.",
        "constraints": "1. 1 <= t <= 10^2\n2. 0 <= N <= 10^6\n3. Time Complexity should be O(n)\n4. Space Complexity should be O(1)",
        "allowedLanguages": ["javascript", "python", "java", "cpp", "c"],
        "languageImplementations": {
          "javascript": {
            "visibleCode": "function findUnique(arr) {\n    // Write your code here\n    // Try to submit your code in O(n) Time complexity\n    \n}",
            "invisibleCode": "module.exports = findUnique;"
          },
          "python": {
            "visibleCode": "def findUnique(arr, n):\n    # Write your code here\n    # Try to submit your code in O(n) Time complexity\n    pass",
            "invisibleCode": "# Test helper code here"
          },
          "java": {
            "visibleCode": "public class Solution {\n    public static int findUnique(int[] arr) {\n        //Your code goes here\n        \n    }\n}",
            "invisibleCode": "// Test helper code here"
          },
          "cpp": {
            "visibleCode": "int findUnique(int *arr, int n) {\n    // Write your code here\n    \n}",
            "invisibleCode": "// Test helper code here"
          },
          "c": {
            "visibleCode": "int FindDuplicate(int arr[], int size) {\n    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n    \n}",
            "invisibleCode": "// Test helper code here"
          }
        },
        "testCases": [
          {
            "input": "[2, 3, 1, 6, 3, 6, 2]",
            "output": "1",
            "isVisible": true,
            "explanation": "1 appears once while all other numbers appear twice"
          },
          {
            "input": "[2, 4, 7, 2, 7]",
            "output": "4",
            "isVisible": true,
            "explanation": "4 is the only element that appears once"
          },
          {
            "input": "[1, 3, 1, 3, 6, 6, 7, 10, 7]",
            "output": "10",
            "isVisible": true,
            "explanation": "10 appears once while all other numbers appear twice"
          },
          {
            "input": "[5, 2, 5, 2, 8, 9, 9]",
            "output": "8",
            "isVisible": false,
            "explanation": "Hidden test case for larger array"
          },
          {
            "input": "[1, 1, 2]",
            "output": "2",
            "isVisible": false,
            "explanation": "Hidden test case for minimum size array"
          }
        ],
        "marks": 15,
        "timeLimit": 1000,
        "memoryLimit": 128,
        "difficulty": "medium",
        "tags": ["arrays", "bit manipulation", "algorithms"]
      }
    ],
    "accessControl": {
      "type": "private"
    }
  }  